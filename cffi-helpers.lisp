(in-package #:issac)

(defcfun (%memset "memset") :pointer
  (destination-pointer :pointer)
  (val :int)
  (byte-length :long))

(defun zero-out (ptr type &optional (count 1))
  (%memset ptr 0 (* count (foreign-type-size type))))

(defmacro c-ptr (ptr type &rest path)
  (labels ((gen (ptr type path)
             (let ((slot (first path)))
               (if (= 1 (length path))
                   `(foreign-slot-pointer ,ptr ',type ',slot  )
                   (let ((form `(foreign-slot-pointer ,ptr ',type ',slot))
                         (type (cffi:foreign-slot-type type slot)))
                     `(c-ptr ,form ,type ,@(rest path)))))))
    (assert path)
    (gen ptr type path)))

(defmacro c-val (ptr type &rest path)
  (labels ((gen (ptr type path)
             (let ((slot (first path)))
               (if (= 1 (length path))
                   `(foreign-slot-value ,ptr ',type ',slot  )
                   (let ((form `(foreign-slot-pointer ,ptr ',type ',slot))
                         (type (cffi:foreign-slot-type type slot)))
                     `(c-val ,form ,type ,@(rest path)))))))
    (assert path)
    (gen ptr type path)))
